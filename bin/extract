#!/usr/bin/env python3
# vim: sw=4:ts=4:et

import configparser
import argparse
import os
import re
import smtplib
import sys
import tempfile
import time

from datetime import datetime, timedelta
from subprocess import Popen, PIPE
from threading import Thread

def stdout(message):
    print(message)

def stderr(message):
    sys.stderr.write('{}\n'.format(message))

import pytz
import tzlocal
LOCAL_TIMEZONE = pytz.timezone(tzlocal.get_localzone().zone)

# this script requires ssh public/private key pairs in place to auth to the sensors
parser = argparse.ArgumentParser(description='Extract pcap from the sensors for a given event.')
parser.add_argument('-c', '--config-path', required=False, dest='config_path', default='/usr/local/etc/pcap_extract.ini',
    help="Configuration file that specifies sensor information.")
parser.add_argument('-D', '--output-dir', required=True, dest='output_dir', default=None,
    help="Directory that contains the individual pcap files. By default this the value of the -o option with .files appended.")
parser.add_argument('-t', '--start-time', required=True, dest='start_time', help="Starting time in YYYY-MM-DD HH:MM:SS [z] format. The timezone (z) is optional ±HHMM format.")
parser.add_argument('-d', '--duration', required=False, default=None, dest='duration', 
    help="Duration in format [DD:][HH:][MM:]SS")
parser.add_argument('-r', '--relative', required=False, action='store_true', default=False, dest='use_relative_duration', 
    help="Interpret duration as relative (around) the start time.  For examle, 10 minutes would be 10 minutes before to 10 minutes after start time.")
parser.add_argument('-e', '--end-time', required=False, default=None, dest='end_time', help="Ending time in YYYY-MM-DD HH:MM:SS [z] format. The timezone (z) is optional ±HHMM format.")
parser.add_argument('bpf', help="The BPF to use in the packet filter.")

args = parser.parse_args()

if not os.path.isdir(args.output_dir):
    try:
        os.makedirs(args.output_dir)
    except Exception as e:
        stderr("unable to create output directory {}: {}".format(args.output_dir, e))
        sys.exit(1)

try:
    dt_start_time = datetime.strptime(args.start_time, '%Y-%m-%d %H:%M:%S %z')
except Exception as e:
    try:
        dt_start_time = datetime.strptime(args.start_time, '%Y-%m-%d %H:%M:%S')
    except Exception as e:
        stderr("unable to parse start time {}: {}".format(args.start_time, e))
        sys.exit(1)

if args.end_time is not None:
    try:
        dt_end_time = datetime.strptime(args.end_time, '%Y-%m-%d %H:%M:%S %z')
    except Exception as e:
        try:
            dt_end_time = datetime.strptime(args.end_time, '%Y-%m-%d %H:%M:%S')
        except Exception as e:
            stderr("unable to parse end time {}: {}".format(args.end_time, e))
            sys.exit(1)
    
if args.end_time is None:
    if args.duration is None:
        stderr("missing --end-time or --duration (see --help)")
        sys.exit(1)

    duration = args.duration.split(':')
    seconds = int(duration[-1])
    minutes = 0
    hours = 0
    days = 0

    if len(duration) > 1:
        minutes = int(duration[-2])
    if len(duration) > 2:
        hours = int(duration[-3])
    if len(duration) > 3:
        days = int(duration[-4])

    offset = timedelta(days=days, seconds=seconds, minutes=minutes, hours=hours)
    dt_end_time = dt_start_time + offset

    if args.use_relative_duration:
        dt_start_time = dt_start_time - offset

args.start_time = dt_start_time
args.end_time = dt_end_time
stdout("gathering pcap from {} to {}".format(args.start_time, args.end_time))

# load sensor information from the configuration file
class Sensor(object):
    def __init__(self, name, host, user, pcap_dir, ssh_key_file, rotation_period, tags, timezone):
        self.name = name
        self.host = host
        self.user = user
        self.pcap_dir = pcap_dir
        self.ssh_key_file = ssh_key_file
        self.rotation_period = rotation_period
        self.tags = tags
        self.timezone = timezone

        if self.timezone is not None:
            try:
                self.timezone = pytz.timezone(self.timezone)
            except Exception as e:
                stderr("the timezone {} specified for sensor {} is invalid".format(timezone, name))
                raise e

        # the list of collected pcap files for this sensor
        self.pcap_files = []

    def extract_pcap(self, start_time, end_time, bpf):
        assert isinstance(start_time, datetime)
        assert isinstance(end_time, datetime)

        stdout("generating file list on sensor {}".format(self))

        #dt_start_time = datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S')
        #dt_end_time = datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S')

        # if there is a timezone specified for the sensor then we need to make sure the
        # times we are using are in the correct timezone
        if self.timezone is not None:
            if start_time.tzinfo is None:
                start_time = LOCAL_TIMEZONE.localize(start_time)
            if end_time.tzinfo is None:
                end_time = LOCAL_TIMEZONE.localize(end_time)

            # convert these times into the timezone of the target
            start_time = start_time.astimezone(self.timezone)
            end_time = end_time.astimezone(self.timezone)

            stdout("convert to timezone {} start_time {} end_time {}".format(self.timezone, start_time, end_time))

        # we push the start_time back by self.rotation_period since the last modified timestamp of a pcap denotes the END of the file
        #dt_start_time = datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S')

        duration = self.rotation_period.split(':')
        seconds = int(duration[-1])
        minutes = 0
        hours = 0
        days = 0

        if len(duration) > 1:
            minutes = int(duration[-2])
        if len(duration) > 2:
            hours = int(duration[-3])
        if len(duration) > 3:
            days = int(duration[-4])

        offset = timedelta(days=days, seconds=seconds, minutes=minutes, hours=hours)
        start_time = start_time - offset

        temp_start_time = dt_start_time.strftime('%Y-%m-%d %H:%M:%S')
        stdout("moved start time to {} to account for rotation period of {} on {}".format(temp_start_time, self.rotation_period, self))

        p = Popen([
            'ssh', '-n', '-i', self.ssh_key_file, '{}@{}'.format(self.user, self.host),
            '/usr/bin/find {pcap_dir} -name "*.pcap" -newermt "{start_time}" -not -newermt "{end_time}"'.format(
                pcap_dir=self.pcap_dir,
                start_time=start_time.strftime('%Y-%m-%d %H:%M:%S'),
                end_time=end_time.strftime('%Y-%m-%d %H:%M:%S'))], stdout=PIPE, universal_newlines=True)

        pcap_file_list = []
        for file_path in p.stdout:
            file_path = file_path.strip()
            pcap_file_list.append(file_path)
            stdout("added {} from {} to search".format(file_path, self))
        p.wait()

        # the expected format of the pcap dump is $pcap_dir/logical_sensor/*.pcap
        # where "logical_sensor" is something like internet, firewall or dmz
        # we'll group the results by "logical_sensor" since a packet can be seen by more than
        # one of these sensors
        pcap_groups = {} # key = sensor_name, value = [] of files
        for file_path in pcap_file_list:
            # take out the pcap and we're left with /local_sensor/whatever.pcap
            logical_dir = file_path[len(self.pcap_dir):]
            # should start with a '/' but whatever
            while logical_dir.startswith('/'):
                logical_dir = logical_dir[1:]
            # first element of this should be the logical sensor dir
            logical_dir = logical_dir.split('/')[0]
            if logical_dir not in pcap_groups:
                pcap_groups[logical_dir] = []

            stdout("adding pcap file {} to logical group {}".format(file_path, logical_dir))
            pcap_groups[logical_dir].append(file_path)

        # now for each of these we want to extract some pcap
        tcpdump_threads = []
        for pcap_group in pcap_groups:
            t = Thread(target=self.execute_extraction, args=(pcap_group, pcap_groups[pcap_group], bpf))
            t.start()
            tcpdump_threads.append(t)

        for t in tcpdump_threads:
            t.join()

    def execute_extraction(self, pcap_group, pcap_file_list, bpf):
        output_file = os.path.join(args.output_dir, '{}.{}.{}.pcap'.format(self.host, pcap_group, time.strftime('%Y%m%d%H%M%S')))
        stdout("extracting pcap from {} into {}".format(self, output_file))
        with open(output_file, 'wb') as fp:
            p = Popen([ 'ssh', '-i', self.ssh_key_file, '{}@{}'.format(self.user, self.host),
                        '/usr/sbin/tcpdump -n -w - -V - "{bpf}"'.format(bpf=bpf)], stdin=PIPE, stdout=fp)

            # tell tcpdump what files to search through
            for pcap_file in pcap_file_list:
                p.stdin.write('{}\n'.format(pcap_file).encode())
            p.stdin.close()
            p.wait()

        self.pcap_files.append(output_file)

    def __str__(self):
        return '{} ({})'.format(self.name, self.host)

config = configparser.ConfigParser()
config.read(args.config_path)

sensors = []
for section in config.sections():
    if section.startswith('sensor_'):
        sensors.append(Sensor(
            name=config[section]['name'],
            host=config[section]['host'],
            user=config[section]['user'],
            pcap_dir=config[section]['pcap_dir'],
            ssh_key_file=config[section]['ssh_key_file'],
            rotation_period=config[section]['rotation_period'],
            tags=config[section]['tags'].split(','),
            timezone=config.get(section, 'timezone', fallback=None)))

stdout("loaded {} sensors from config".format(len(sensors)))

threads = []
for sensor in sensors:
    t = Thread(target=sensor.extract_pcap, args=(args.start_time, args.end_time, args.bpf))
    t.start()
    threads.append(t)

# wait for them all to complete
for t in threads:
    t.join()
