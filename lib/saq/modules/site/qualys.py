# vim: sw=4:ts=4:et

import logging
import pymssql

import saq
from saq.analysis import Analysis, Observable
from saq.modules import AnalysisModule
from saq.modules.asset import AssetAnalysis
from saq.constants import *


class QualysAnalysis(Analysis):

    @property
    def jinja_template_path(self):
        return "analysis/qualys.html"

    @property
    def jinja_details(self):
        assert isinstance(self.details, list)
        # put them in order of severity
        return sorted(self.details, key=lambda x: (-x['vSEVERITY'], x['vTITLE']))


class QualysAnalyzer(AnalysisModule):
    """ Ashland Qualys Analyzer

Ashland maintains a SQL Server database that contains extracts from the reports generated by Qualys.

"""
    @property
    def generated_analysis_type(self):
        return QualysAnalysis

    @property
    def valid_observable_types(self):
        return F_ASSET

    def __init__(self, *args, **kwargs):
        super(QualysAnalyzer, self).__init__(*args, **kwargs)

        # load settings from configuration
        self.server = saq.CONFIG.get(self.config_section, 'server')
        self.database = saq.CONFIG.get(self.config_section, 'database')
        self.user = saq.CONFIG.get(self.config_section, 'user')
        self.password = saq.CONFIG.get(self.config_section, 'password')
    
    def execute_analysis(self, asset):

        # do we have host analysis for this asset?
        host_analysis = asset.get_analysis(AssetAnalysis)
        if host_analysis is not None:
            if host_analysis.hostname is not None:
                logging.debug("analyzing asset {0}".format(host_analysis.hostname))
                try:
                    self.acquire_semaphore()
                    analysis = QualysAnalysis()
                    analysis.details = self.analyze_asset(host_analysis.hostname)
                    asset.add_analysis(analysis)
                finally:
                    self.release_semaphore()

    def analyze_asset(self, hostname):
        assert hostname is not None
        assert len(hostname) > 0
        
        result = []

        conn = None
        #logging.debug("{server} {database} {user} {password}".format(
            #server=self.server,
            #database=self.database,
            #user=self.user,
            #password=self.password))

        logging.debug("connecting to mysql database server {0}".format(self.server))
        with pymssql.connect(self.server, self.user, self.password, self.database) as conn:
            with conn.cursor(as_dict=True) as cursor:
                logging.debug("querying qualys database for {0}".format(hostname))
                cursor.execute("""
SELECT
    *
FROM
    view_vuln_csv
WHERE
    LOWER(DNS) LIKE %s
""", ('%' + hostname + '%'))

                for row in cursor:
                    result.append(row)

                logging.debug("found {0} vulnerabilities for {1}".format(
                    len(result), hostname))

        return result
